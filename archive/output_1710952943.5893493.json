{"content": {"suites": {"0": {"status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_login_with_valid_credentials", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_login_with_invalid_email_and_valid_password", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_login_with_valid_email_and_invalid_password", "rerun": "0"}, "3": {"status": "ERROR", "message": "request = <SubRequest 'setup_and_teardown' for <Function test_login_with_empty_credentials>>\n\n    @pytest.fixture()\n    def setup_and_teardown(request):\n        global  driver\n        browser  = ReadConfigurations.read_configurations(\"common info\", \"browser\")\n        url = ReadConfigurations.read_configurations(\"common info\", \"baseURL\")\n        if browser.__eq__(\"Chrome\"):\n            driver = webdriver.Chrome()\n        elif browser.__eq__(\"Firefox\"):\n            driver = webdriver.firefox()\n        elif browser.__eq__(\"Edge\"):\n            driver = webdriver.Edge()\n        else:\n            print(\"provide a valid browser name\")\n    \n        driver.maximize_window()\n        driver.get(url)\n>       driver.maximize_window()\n\nTestCases\\conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FE7EA94150>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...07FF79CD068D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC7616257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC7654AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79CD9AD02+56930]\nE       \t(No symbol) [0x00007FF79CD0F602]\nE       \t(No symbol) [0x00007FF79CBC42E5]\nE       \t(No symbol) [0x00007FF79CBA515A]\nE       \t(No symbol) [0x00007FF79CBA3709]\nE       \t(No symbol) [0x00007FF79CBA28AC]\nE       \t(No symbol) [0x00007FF79CC5CA69]\nE       \t(No symbol) [0x00007FF79CC2BC9A]\nE       \t(No symbol) [0x00007FF79CC481E2]\nE       \t(No symbol) [0x00007FF79CC2BA43]\nE       \t(No symbol) [0x00007FF79CBFD438]\nE       \t(No symbol) [0x00007FF79CBFE4D1]\nE       \tGetHandleVerifier [0x00007FF79D116F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF79D1704CD+4077101]\nE       \tGetHandleVerifier [0x00007FF79D16865F+4044735]\nE       \tGetHandleVerifier [0x00007FF79CE39736+706710]\nE       \t(No symbol) [0x00007FF79CD1B8DF]\nE       \t(No symbol) [0x00007FF79CD16AC4]\nE       \t(No symbol) [0x00007FF79CD16C1C]\nE       \t(No symbol) [0x00007FF79CD068D4]\nE       \tBaseThreadInitThunk [0x00007FFC7616257D+29]\nE       \tRtlUserThreadStart [0x00007FFC7654AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_login_with_empty_credentials", "rerun": "0"}}, "suite_name": "TestCases/Test_Login.py"}, "1": {"suite_name": "TestCases/Test_Register.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_register_with_mandatory_fields", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'setup_and_teardown' for <Function test_register_with_all_fields>>\n\n    @pytest.fixture()\n    def setup_and_teardown(request):\n        global  driver\n        browser  = ReadConfigurations.read_configurations(\"common info\", \"browser\")\n        url = ReadConfigurations.read_configurations(\"common info\", \"baseURL\")\n        if browser.__eq__(\"Chrome\"):\n            driver = webdriver.Chrome()\n        elif browser.__eq__(\"Firefox\"):\n            driver = webdriver.firefox()\n        elif browser.__eq__(\"Edge\"):\n            driver = webdriver.Edge()\n        else:\n            print(\"provide a valid browser name\")\n    \n        driver.maximize_window()\n        driver.get(url)\n>       driver.maximize_window()\n\nTestCases\\conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FE7EF87550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...07FF79CD068D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC7616257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC7654AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79CD9AD02+56930]\nE       \t(No symbol) [0x00007FF79CD0F602]\nE       \t(No symbol) [0x00007FF79CBC42E5]\nE       \t(No symbol) [0x00007FF79CBA515A]\nE       \t(No symbol) [0x00007FF79CBA3709]\nE       \t(No symbol) [0x00007FF79CBA28AC]\nE       \t(No symbol) [0x00007FF79CC5CA69]\nE       \t(No symbol) [0x00007FF79CC2BC9A]\nE       \t(No symbol) [0x00007FF79CC481E2]\nE       \t(No symbol) [0x00007FF79CC2BA43]\nE       \t(No symbol) [0x00007FF79CBFD438]\nE       \t(No symbol) [0x00007FF79CBFE4D1]\nE       \tGetHandleVerifier [0x00007FF79D116F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF79D1704CD+4077101]\nE       \tGetHandleVerifier [0x00007FF79D16865F+4044735]\nE       \tGetHandleVerifier [0x00007FF79CE39736+706710]\nE       \t(No symbol) [0x00007FF79CD1B8DF]\nE       \t(No symbol) [0x00007FF79CD16AC4]\nE       \t(No symbol) [0x00007FF79CD16C1C]\nE       \t(No symbol) [0x00007FF79CD068D4]\nE       \tBaseThreadInitThunk [0x00007FFC7616257D+29]\nE       \tRtlUserThreadStart [0x00007FFC7654AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_register_with_all_fields", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_register_with_duplicate_email", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_register_with_empty_fields", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}, "2": {"suite_name": "TestCases/Test_Search.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup_and_teardown' for <Function test_search_for_a_valid_product>>\n\n    @pytest.fixture()\n    def setup_and_teardown(request):\n        global  driver\n        browser  = ReadConfigurations.read_configurations(\"common info\", \"browser\")\n        url = ReadConfigurations.read_configurations(\"common info\", \"baseURL\")\n        if browser.__eq__(\"Chrome\"):\n            driver = webdriver.Chrome()\n        elif browser.__eq__(\"Firefox\"):\n            driver = webdriver.firefox()\n        elif browser.__eq__(\"Edge\"):\n            driver = webdriver.Edge()\n        else:\n            print(\"provide a valid browser name\")\n    \n        driver.maximize_window()\n        driver.get(url)\n>       driver.maximize_window()\n\nTestCases\\conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FE7EFB5810>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...07FF79CD068D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC7616257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC7654AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79CD9AD02+56930]\nE       \t(No symbol) [0x00007FF79CD0F602]\nE       \t(No symbol) [0x00007FF79CBC42E5]\nE       \t(No symbol) [0x00007FF79CBA515A]\nE       \t(No symbol) [0x00007FF79CBA3709]\nE       \t(No symbol) [0x00007FF79CBA28AC]\nE       \t(No symbol) [0x00007FF79CC5CA69]\nE       \t(No symbol) [0x00007FF79CC2BC9A]\nE       \t(No symbol) [0x00007FF79CC481E2]\nE       \t(No symbol) [0x00007FF79CC2BA43]\nE       \t(No symbol) [0x00007FF79CBFD438]\nE       \t(No symbol) [0x00007FF79CBFE4D1]\nE       \tGetHandleVerifier [0x00007FF79D116F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF79D1704CD+4077101]\nE       \tGetHandleVerifier [0x00007FF79D16865F+4044735]\nE       \tGetHandleVerifier [0x00007FF79CE39736+706710]\nE       \t(No symbol) [0x00007FF79CD1B8DF]\nE       \t(No symbol) [0x00007FF79CD16AC4]\nE       \t(No symbol) [0x00007FF79CD16C1C]\nE       \t(No symbol) [0x00007FF79CD068D4]\nE       \tBaseThreadInitThunk [0x00007FFC7616257D+29]\nE       \tRtlUserThreadStart [0x00007FFC7654AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_search_for_a_valid_product", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_search_for_an_invalid_product", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'setup_and_teardown' for <Function test_search_without_entering_any_product>>\n\n    @pytest.fixture()\n    def setup_and_teardown(request):\n        global  driver\n        browser  = ReadConfigurations.read_configurations(\"common info\", \"browser\")\n        url = ReadConfigurations.read_configurations(\"common info\", \"baseURL\")\n        if browser.__eq__(\"Chrome\"):\n            driver = webdriver.Chrome()\n        elif browser.__eq__(\"Firefox\"):\n            driver = webdriver.firefox()\n        elif browser.__eq__(\"Edge\"):\n            driver = webdriver.Edge()\n        else:\n            print(\"provide a valid browser name\")\n    \n        driver.maximize_window()\n        driver.get(url)\n>       driver.maximize_window()\n\nTestCases\\conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FE7EECED50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF79CD068D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC7616257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC7654AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79CD9AD02+56930]\nE       \t(No symbol) [0x00007FF79CD0F602]\nE       \t(No symbol) [0x00007FF79CBC42E5]\nE       \t(No symbol) [0x00007FF79CBA1D4C]\nE       \t(No symbol) [0x00007FF79CC323F7]\nE       \t(No symbol) [0x00007FF79CC47891]\nE       \t(No symbol) [0x00007FF79CC2BA43]\nE       \t(No symbol) [0x00007FF79CBFD438]\nE       \t(No symbol) [0x00007FF79CBFE4D1]\nE       \tGetHandleVerifier [0x00007FF79D116F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF79D1704CD+4077101]\nE       \tGetHandleVerifier [0x00007FF79D16865F+4044735]\nE       \tGetHandleVerifier [0x00007FF79CE39736+706710]\nE       \t(No symbol) [0x00007FF79CD1B8DF]\nE       \t(No symbol) [0x00007FF79CD16AC4]\nE       \t(No symbol) [0x00007FF79CD16C1C]\nE       \t(No symbol) [0x00007FF79CD068D4]\nE       \tBaseThreadInitThunk [0x00007FFC7616257D+29]\nE       \tRtlUserThreadStart [0x00007FFC7654AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_search_without_entering_any_product", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}}}, "date": "March 20, 2024", "start_time": 1710945824.1845632, "total_suite": 3, "status": "FAIL", "status_list": {"pass": "7", "fail": "0", "skip": "0", "error": "4", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "11"}